{- !!! DO NOT EDIT THIS FILE MANUALLY !!! -}

module Proto.Test.Internals_ exposing (Proto__Test__Complex, Proto__Test__Nested, Proto__Test__Simple, decodeProto__Test__Complex, decodeProto__Test__Nested, decodeProto__Test__Simple, defaultProto__Test__Complex, defaultProto__Test__Nested, defaultProto__Test__Simple, encodeProto__Test__Complex, encodeProto__Test__Nested, encodeProto__Test__Simple, fieldNumbersProto__Test__Complex, fieldNumbersProto__Test__Nested, fieldNumbersProto__Test__Simple)

{-| 
This file was automatically generated by
- [`protoc-gen-elm`](https://www.npmjs.com/package/protoc-gen-elm) 4.0.4
- `protoc` 4.25.3
- the following specification files: `test_resources/test.proto`

To run it, add a dependency via `elm install` on [`elm-protocol-buffers`](https://package.elm-lang.org/packages/eriktim/elm-protocol-buffers/1.2.0) version latest or higher.

@docs Proto__Test__Complex, Proto__Test__Nested, Proto__Test__Simple, decodeProto__Test__Complex, decodeProto__Test__Nested

@docs decodeProto__Test__Simple, defaultProto__Test__Complex, defaultProto__Test__Nested, defaultProto__Test__Simple

@docs encodeProto__Test__Complex, encodeProto__Test__Nested, encodeProto__Test__Simple, fieldNumbersProto__Test__Complex

@docs fieldNumbersProto__Test__Nested, fieldNumbersProto__Test__Simple

-}

import Maybe
import Proto.Test.Role
import Protobuf.Decode
import Protobuf.Encode
import Protobuf.Types.Int64


{-| The field numbers for the fields of `Proto__Test__Nested`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersProto__Test__Nested : { teamId : Int, teamName : Int }
fieldNumbersProto__Test__Nested =
    { teamId = 1, teamName = 2 }


{-| Default for Proto__Test__Nested. Should only be used for 'required' decoders as an initial value.

-}
defaultProto__Test__Nested : Proto__Test__Nested
defaultProto__Test__Nested =
    { teamId = Protobuf.Types.Int64.fromInts 0 0, teamName = "" }


{-| Declares how to decode a `Proto__Test__Nested` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeProto__Test__Nested : Protobuf.Decode.Decoder Proto__Test__Nested
decodeProto__Test__Nested =
    Protobuf.Decode.message
        defaultProto__Test__Nested
        [ Protobuf.Decode.optional 1 Protobuf.Decode.int64 (\a r -> { r | teamId = a })
        , Protobuf.Decode.optional 2 Protobuf.Decode.string (\a r -> { r | teamName = a })
        ]


{-| Declares how to encode a `Proto__Test__Nested` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeProto__Test__Nested : Proto__Test__Nested -> Protobuf.Encode.Encoder
encodeProto__Test__Nested value =
    Protobuf.Encode.message [ ( 1, Protobuf.Encode.int64 value.teamId ), ( 2, Protobuf.Encode.string value.teamName ) ]


{-| `Proto__Test__Nested` message

-}
type alias Proto__Test__Nested =
    { teamId : Protobuf.Types.Int64.Int64, teamName : String }


{-| The field numbers for the fields of `Proto__Test__Complex`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersProto__Test__Complex : { userId : Int, nested : Int, userName : Int, email : Int, roles : Int }
fieldNumbersProto__Test__Complex =
    { userId = 1, nested = 2, userName = 3, email = 4, roles = 5 }


{-| Default for Proto__Test__Complex. Should only be used for 'required' decoders as an initial value.

-}
defaultProto__Test__Complex : Proto__Test__Complex
defaultProto__Test__Complex =
    { userId = Protobuf.Types.Int64.fromInts 0 0, nested = Nothing, userName = "", email = "", roles = [] }


{-| Declares how to decode a `Proto__Test__Complex` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeProto__Test__Complex : Protobuf.Decode.Decoder Proto__Test__Complex
decodeProto__Test__Complex =
    Protobuf.Decode.message
        defaultProto__Test__Complex
        [ Protobuf.Decode.optional 1 Protobuf.Decode.int64 (\a r -> { r | userId = a })
        , Protobuf.Decode.optional 2 (Protobuf.Decode.map Just decodeProto__Test__Nested) (\a r -> { r | nested = a })
        , Protobuf.Decode.optional 3 Protobuf.Decode.string (\a r -> { r | userName = a })
        , Protobuf.Decode.optional 4 Protobuf.Decode.string (\a r -> { r | email = a })
        , Protobuf.Decode.repeated 5 Proto.Test.Role.decodeRole .roles (\a r -> { r | roles = a })
        ]


{-| Declares how to encode a `Proto__Test__Complex` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeProto__Test__Complex : Proto__Test__Complex -> Protobuf.Encode.Encoder
encodeProto__Test__Complex value =
    Protobuf.Encode.message
        [ ( 1, Protobuf.Encode.int64 value.userId )
        , ( 2, (Maybe.map encodeProto__Test__Nested >> Maybe.withDefault Protobuf.Encode.none) value.nested )
        , ( 3, Protobuf.Encode.string value.userName )
        , ( 4, Protobuf.Encode.string value.email )
        , ( 5, (Protobuf.Encode.list Proto.Test.Role.encodeRole) value.roles )
        ]


{-| `Proto__Test__Complex` message

-}
type alias Proto__Test__Complex =
    { userId : Protobuf.Types.Int64.Int64
    , nested : Maybe Proto__Test__Nested
    , userName : String
    , email : String
    , roles : List Proto.Test.Role.Role
    }


{-| The field numbers for the fields of `Proto__Test__Simple`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersProto__Test__Simple : { someClaim : Int }
fieldNumbersProto__Test__Simple =
    { someClaim = 2 }


{-| Default for Proto__Test__Simple. Should only be used for 'required' decoders as an initial value.

-}
defaultProto__Test__Simple : Proto__Test__Simple
defaultProto__Test__Simple =
    { someClaim = "" }


{-| Declares how to decode a `Proto__Test__Simple` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeProto__Test__Simple : Protobuf.Decode.Decoder Proto__Test__Simple
decodeProto__Test__Simple =
    Protobuf.Decode.message
        defaultProto__Test__Simple
        [ Protobuf.Decode.optional 2 Protobuf.Decode.string (\a r -> { r | someClaim = a }) ]


{-| Declares how to encode a `Proto__Test__Simple` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeProto__Test__Simple : Proto__Test__Simple -> Protobuf.Encode.Encoder
encodeProto__Test__Simple value =
    Protobuf.Encode.message [ ( 2, Protobuf.Encode.string value.someClaim ) ]


{-| `Proto__Test__Simple` message

-}
type alias Proto__Test__Simple =
    { someClaim : String }
