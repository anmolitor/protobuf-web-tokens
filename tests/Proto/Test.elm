{- !!! DO NOT EDIT THIS FILE MANUALLY !!! -}

module Proto.Test exposing (Complex, Nested, Simple, decodeComplex, decodeNested, decodeSimple, defaultComplex, defaultNested, defaultSimple, encodeComplex, encodeNested, encodeSimple, fieldNumbersComplex, fieldNumbersNested, fieldNumbersSimple)

{-| 
This file was automatically generated by
- [`protoc-gen-elm`](https://www.npmjs.com/package/protoc-gen-elm) 4.0.4
- `protoc` 4.25.3
- the following specification files: `test_resources/test.proto`

To run it, add a dependency via `elm install` on [`elm-protocol-buffers`](https://package.elm-lang.org/packages/eriktim/elm-protocol-buffers/1.2.0) version latest or higher.

@docs Complex, Nested, Simple, decodeComplex, decodeNested, decodeSimple, defaultComplex, defaultNested, defaultSimple, encodeComplex

@docs encodeNested, encodeSimple, fieldNumbersComplex, fieldNumbersNested, fieldNumbersSimple

-}

import Proto.Test.Internals_
import Protobuf.Decode
import Protobuf.Encode


{-| The field numbers for the fields of `Nested`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersNested : { teamId : Int, teamName : Int }
fieldNumbersNested =
    Proto.Test.Internals_.fieldNumbersProto__Test__Nested


{-| Default for Nested. Should only be used for 'required' decoders as an initial value.

-}
defaultNested : Nested
defaultNested =
    Proto.Test.Internals_.defaultProto__Test__Nested


{-| Declares how to decode a `Nested` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeNested : Protobuf.Decode.Decoder Nested
decodeNested =
    Proto.Test.Internals_.decodeProto__Test__Nested


{-| Declares how to encode a `Nested` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeNested : Nested -> Protobuf.Encode.Encoder
encodeNested =
    Proto.Test.Internals_.encodeProto__Test__Nested


{-| `Nested` message

-}
type alias Nested =
    Proto.Test.Internals_.Proto__Test__Nested


{-| The field numbers for the fields of `Complex`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersComplex : { userId : Int, nested : Int, userName : Int, email : Int, roles : Int }
fieldNumbersComplex =
    Proto.Test.Internals_.fieldNumbersProto__Test__Complex


{-| Default for Complex. Should only be used for 'required' decoders as an initial value.

-}
defaultComplex : Complex
defaultComplex =
    Proto.Test.Internals_.defaultProto__Test__Complex


{-| Declares how to decode a `Complex` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeComplex : Protobuf.Decode.Decoder Complex
decodeComplex =
    Proto.Test.Internals_.decodeProto__Test__Complex


{-| Declares how to encode a `Complex` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeComplex : Complex -> Protobuf.Encode.Encoder
encodeComplex =
    Proto.Test.Internals_.encodeProto__Test__Complex


{-| `Complex` message

-}
type alias Complex =
    Proto.Test.Internals_.Proto__Test__Complex


{-| The field numbers for the fields of `Simple`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersSimple : { someClaim : Int }
fieldNumbersSimple =
    Proto.Test.Internals_.fieldNumbersProto__Test__Simple


{-| Default for Simple. Should only be used for 'required' decoders as an initial value.

-}
defaultSimple : Simple
defaultSimple =
    Proto.Test.Internals_.defaultProto__Test__Simple


{-| Declares how to decode a `Simple` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeSimple : Protobuf.Decode.Decoder Simple
decodeSimple =
    Proto.Test.Internals_.decodeProto__Test__Simple


{-| Declares how to encode a `Simple` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeSimple : Simple -> Protobuf.Encode.Encoder
encodeSimple =
    Proto.Test.Internals_.encodeProto__Test__Simple


{-| `Simple` message

-}
type alias Simple =
    Proto.Test.Internals_.Proto__Test__Simple
