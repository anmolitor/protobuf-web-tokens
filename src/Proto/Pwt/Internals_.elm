{- !!! DO NOT EDIT THIS FILE MANUALLY !!! -}

module Proto.Pwt.Internals_ exposing (Proto__Pwt__SignedToken, Proto__Pwt__Token, decodeProto__Pwt__SignedToken, decodeProto__Pwt__Token, defaultProto__Pwt__SignedToken, defaultProto__Pwt__Token, encodeProto__Pwt__SignedToken, encodeProto__Pwt__Token, fieldNumbersProto__Pwt__SignedToken, fieldNumbersProto__Pwt__Token)

{-| 
This file was automatically generated by
- [`protoc-gen-elm`](https://www.npmjs.com/package/protoc-gen-elm) 4.0.4
- `protoc` 4.25.3
- the following specification files: `pwt.proto`

To run it, add a dependency via `elm install` on [`elm-protocol-buffers`](https://package.elm-lang.org/packages/eriktim/elm-protocol-buffers/1.2.0) version latest or higher.

@docs Proto__Pwt__SignedToken, Proto__Pwt__Token, decodeProto__Pwt__SignedToken, decodeProto__Pwt__Token

@docs defaultProto__Pwt__SignedToken, defaultProto__Pwt__Token, encodeProto__Pwt__SignedToken, encodeProto__Pwt__Token

@docs fieldNumbersProto__Pwt__SignedToken, fieldNumbersProto__Pwt__Token

-}

import Bytes
import Maybe
import Proto.Google.Protobuf.Internals_
import Protobuf.Decode
import Protobuf.Encode


{-| The field numbers for the fields of `Proto__Pwt__SignedToken`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersProto__Pwt__SignedToken : { data : Int, signature : Int }
fieldNumbersProto__Pwt__SignedToken =
    { data = 1, signature = 2 }


{-| Default for Proto__Pwt__SignedToken. Should only be used for 'required' decoders as an initial value.

-}
defaultProto__Pwt__SignedToken : Proto__Pwt__SignedToken
defaultProto__Pwt__SignedToken =
    { data = Protobuf.Encode.encode <| Protobuf.Encode.string ""
    , signature = Protobuf.Encode.encode <| Protobuf.Encode.string ""
    }


{-| Declares how to decode a `Proto__Pwt__SignedToken` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeProto__Pwt__SignedToken : Protobuf.Decode.Decoder Proto__Pwt__SignedToken
decodeProto__Pwt__SignedToken =
    Protobuf.Decode.message
        defaultProto__Pwt__SignedToken
        [ Protobuf.Decode.optional 1 Protobuf.Decode.bytes (\a r -> { r | data = a })
        , Protobuf.Decode.optional 2 Protobuf.Decode.bytes (\a r -> { r | signature = a })
        ]


{-| Declares how to encode a `Proto__Pwt__SignedToken` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeProto__Pwt__SignedToken : Proto__Pwt__SignedToken -> Protobuf.Encode.Encoder
encodeProto__Pwt__SignedToken value =
    Protobuf.Encode.message [ ( 1, Protobuf.Encode.bytes value.data ), ( 2, Protobuf.Encode.bytes value.signature ) ]


{-| `Proto__Pwt__SignedToken` message

-}
type alias Proto__Pwt__SignedToken =
    { data : Bytes.Bytes, signature : Bytes.Bytes }


{-| The field numbers for the fields of `Proto__Pwt__Token`. This is mostly useful for internals, like documentation generation.

-}
fieldNumbersProto__Pwt__Token : { validUntil : Int, claims : Int }
fieldNumbersProto__Pwt__Token =
    { validUntil = 1, claims = 2 }


{-| Default for Proto__Pwt__Token. Should only be used for 'required' decoders as an initial value.

-}
defaultProto__Pwt__Token : Proto__Pwt__Token
defaultProto__Pwt__Token =
    { validUntil = Nothing, claims = Protobuf.Encode.encode <| Protobuf.Encode.string "" }


{-| Declares how to decode a `Proto__Pwt__Token` from Bytes. To actually perform the conversion from Bytes, you need to use Protobuf.Decode.decode from eriktim/elm-protocol-buffers.

-}
decodeProto__Pwt__Token : Protobuf.Decode.Decoder Proto__Pwt__Token
decodeProto__Pwt__Token =
    Protobuf.Decode.message
        defaultProto__Pwt__Token
        [ Protobuf.Decode.optional
            1
            (Protobuf.Decode.map Just Proto.Google.Protobuf.Internals_.decodeProto__Google__Protobuf__Timestamp)
            (\a r -> { r | validUntil = a })
        , Protobuf.Decode.optional 2 Protobuf.Decode.bytes (\a r -> { r | claims = a })
        ]


{-| Declares how to encode a `Proto__Pwt__Token` to Bytes. To actually perform the conversion to Bytes, you need to use Protobuf.Encode.encode from eriktim/elm-protocol-buffers.

-}
encodeProto__Pwt__Token : Proto__Pwt__Token -> Protobuf.Encode.Encoder
encodeProto__Pwt__Token value =
    Protobuf.Encode.message
        [ ( 1
          , (Maybe.map Proto.Google.Protobuf.Internals_.encodeProto__Google__Protobuf__Timestamp
                >> Maybe.withDefault Protobuf.Encode.none
            )
                value.validUntil
          )
        , ( 2, Protobuf.Encode.bytes value.claims )
        ]


{-| `Proto__Pwt__Token` message

-}
type alias Proto__Pwt__Token =
    { validUntil : Maybe Proto.Google.Protobuf.Internals_.Proto__Google__Protobuf__Timestamp, claims : Bytes.Bytes }
